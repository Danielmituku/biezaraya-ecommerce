version: '3.8'

services:
  # MongoDB DatabaseD
  mongodb:
    image: mongo:6.0
    container_name: fashion_ecommerce_db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: ecommerce-fashion
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - ecommerce_network

  # Redis for caching (optional)
  redis:
    image: redis:7.0-alpine
    container_name: fashion_ecommerce_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce_network

  # Backend API
  backend:
    build: ./backend
    container_name: fashion_ecommerce_backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: development
      MONGODB_URI: mongodb://admin:password@mongodb:27017/ecommerce-fashion?authSource=admin
      REDIS_URL: redis://redis:6379
    depends_on:
      - mongodb
      - redis
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - ecommerce_network

  # Frontend React App
  frontend:
    build: ./frontend
    container_name: fashion_ecommerce_frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:5000/api
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - ecommerce_network

volumes:
  mongodb_data:
  redis_data:

networks:
  ecommerce_network:
    driver: bridge
